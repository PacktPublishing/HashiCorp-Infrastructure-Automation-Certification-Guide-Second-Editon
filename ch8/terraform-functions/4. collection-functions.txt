Collection functions

alltrue() function
==================
This function returns true if the input collection has true or “true”.

Examples:
$ alltrue([true, true])
> true
$ alltrue([true, false])
> false

anytrue() function
==================
This function returns true if any of the elements in input collection has true or true.

Examples:
$ anytrue([true, false])
> true
$ anytrue([true])
> true

chunklist() function
=====================
This function splits a single input list into a list of lists based on chunk size.

Examples:
$ chunklist([11, 22, 33], 1)
> tolist([
  tolist([
    11,
  ]),
  tolist([
    22,
  ]),
  tolist([
    33,
  ]),
])

coalesce() and coalescelist() functions
=======================================
These functions return the first input element which is not null or empty string. The coalescelist() function will take lists as input.

Examples:
$ coalesce("", "", null, "a")
> "a"
$ coalescelist([], ["a", "b"])
> [
  "a",
  "b",
]

compact() function
==================
The compact() function will take a list of strings as input and return the list without empty or null values.

Example:
$ compact(["a", "b", "", null, "c"])
[CD113][CD114]
> tolist([
  "a",
  "b",
  "c",
])

concat() function
=================
The concat() function takes lists as inputs and produces a single list after concatenation.

Example:
$ concat(["1", "2"],["3"])
> [
  "1",
  "2",
  "3"
]

contains() function
===================
The contains() function returns true or false based on whether the element is present in the list or not.

Example:
$ contains(["1", "2"], "2")
> true

distinct() function
===================
The distinct() function will return the list without any duplicates.

$ distinct(["1", "11", "111", "1", "11", "1111"])
> tolist([
  "1",
  "11",
  "111",
  "1111",
])

element() function
==================
This function retrieves a single element from the list.

Example:
$ element(["1", "11", "111"], 1)
> "11"

flatten() function
==================
The flatten() function will take lists and replace the elements with the flattened sequence of the elements. If the list element is a nested list, that too will be flattened.

Example:
$ flatten([["a", "b", "c"], ["d"]])
[
  "a",
  "b",
  "c",
  "d",
]

keys() and values() functions
=============================
The keys() and values() functions will return the keys and values of the map respectively.

Examples:
$ keys({one=1, two=2, three=3})
[
  "one",
  "three",
  "two",
]
$ values({one=1, two=2, three=3})
> [
  1,
  3,
  2,
]

index() function
================
The index() function will return the index of the search element if it is present.

Example:
$ index(["a", "b", "c"], "a")
> 0 

length() function
=================
The length() function will return the length of the list.

Example:
$ length(["a", "b", "c"])
> 3

lookup() function
=================
The lookup() function will return the value from the map for the provided key.

Example:
$ lookup({one=1, two=2, three=3}, "two")
> 2

matchkeys() function
====================
The matchkeys() function will create a new list with the elements whose indexes match with the corresponding indexes in the keylist. The searchvalue is the third argument.

Syntax:
matchkeys(valuelist, keylist, searchvalue)

Example:
$ matchkeys(["ec2", "lambda", "dynamodb"], ["server", "serverless", "serverless"], ["serverless"])
> tolist([
  "lambda",
  "dynamodb",
])

merge() function
================
The merge() function will take a map or objects as input and create a merged map. If the same key is present in multiple maps, the last occurrence will take precedence.

Example:
$ merge({a=1, b=2, c=3},{b=4},{d=5})
{
  "a" = 1
  "b" = 4
  "c" = 3
  "d" = 5
}

one() function
==============
The one() function will take a list or a set or a tuple with zero or one element. If the input has zero elements, the function will return null and if it has one element, the first element will be returned. If there is more than one element, the function will throw an error.

Example:
$ one([])
> null
$ one(["1"])
> "1"

range() function
================
The range() function generates a list of numbers with the specified start value, end value and step value.

Syntax:
range(max-value)
range(start-value, max-value)
range(start-value, max-value, step-value)

Examples:
$ range(3)
> tolist([
  0,
  1,
  2,
])
$ range(11, 15)
> tolist([
  11,
  12,
  13,
  14,
])
$ range(2, 10, 2)
> tolist([
  2,
  4,
  6,
  8,
])

reverse() function
==================
The reverse function takes the input list and returns it in a reversed fashion.

Example:
$ reverse([1,2])
> [
  2,
  1,
]

set functions
==============
Under collections functions, there is a special category of functions grouped together as set functions and there are four functions available in this category, that are similar in syntax, and you will now look at the examples directly.
These functions will work with the input values of type set.

setintersection() method
========================
Intersection result of the input sets.

$ setintersection(["adam", "bob"],["bob", "chris"])
> toset([
  "bob",
])

setproduct() method
===================
Product result of the input sets.

$ setproduct(["adam"],["1", "2"])
> tolist([
  [
    "adam",
    "1",
  ],
  [
    "adam",
    "2",
  ],
])

setunion() method
=================
Combined result of the input sets.

$ setunion(["adam", "bob"],["bob", "chris"])
> toset([
  "adam",
  "bob",
  "chris",
])

setsubtract() method
====================
Result of the input sets when the common elements are removed from the first set. This takes two sets only as input.

$ setsubtract(["adam", "bob"],["bob", "chris"])
[CD144][CD145]
> toset([
  "adam",
])

slice() function
================
The slice() function extracts the elements from the specified starting index and last index. The result will not include the element in the last index. This is similar to the substr() function, but the substr() function will use the length attribute instead of index.

Example:
$ slice([11, 22, 33, 44, 55], 1, 4)
> [
  22,
  33,
  44,
]

sort() function
===============
The sort() function sorts the given list.

Example:
$ sort(["23", "12", "44", "09", "66"])
> tolist([
  "09",
  "12",
  "23",
  "44",
  "66",
])

sum() function
==============
This function returns the sum of the elements in the given list.

Example:
$ sum([11, 22, 33])
> 66

transpose() function
====================
The transpose() function takes the map of strings and switches the keys and values.

Example:
$ transpose({"s3" = ["aws", "service"]})
> tomap({
  "aws" = tolist([
    "s3",
  ])
  "service" = tolist([
    "s3",
  ])
})

zipmap() function
=================
The zipmap() function creates a map with the specified list inputs as key and values.

Example:
$ zipmap(["a"], ["1"])
> {
  "a" = "1"
}
Hash and crypto functions

uuid() function
===============
The uuid() function generates a unique UUID identifier. The version 4 UUID generated by this function is random in nature and cannot be duplicated easily. This function will generate a new output every time it is tried out.

Example:
$ uuid()
> "9e3eaa9e-5304-4077-7a9a-4f267e9319aa"[KS221][CD222][CD223]

uuidv5() function
=================
This function generates a version 5 UUID based on the name and namespace values. This is different from the uuid() function where the generated UUID will be the same if the namespace and name values remain the same. (not random in nature)
The valid values for namespace are “dns”, “url”, “oid” (object identifier) and “x500”.

Syntax:
uuidv5(namespace-value, name)

Example:
$ uuidv5("url", "https://www.google.co.in")
> "1040b910-63b8-53cb-ad98-8d28e9d9eb95"

Other functions under this category can be grouped into two categories like the functions that work on the string and ones that works on files.
Functions with strings input
============================
* base64sha256()
* base64sha512()
* bcrypt()
* md5()
* sha1()
* sha256()
* sha512()

Examples:
$ sha1("test string")
> "661295c9cbf9d6b2f6428414504a8deed3020641"
$ md5("test string")
> "6f8db599de986fab7a21625b7916589c"
$ base64sha256("test string")
> "1VecRt/MfxggcBPmW0Tky04sIpj0rEV7qPgnQ/Mekws="

Functions with file input
=========================
* filebase64sha256()
* filebase64sha512()
* filemd5()
* filesha1()
* filesha256()
* filesha512()

For the following examples, you can reuse the same test file created previously when the filesystem functions are covered.
Examples:
$ filebase64sha256("./test.txt")
> "03uTlcK68Wj5d86f+ewAfXJw/ITL8VSTJL/I38NDM6k="
$ filemd5("./test.txt")
> "8bc944dbd052ef51652e70a5104492e3"